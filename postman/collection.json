{
  "info": {
    "name": "Cultour API Collection",
    "_postman_id": "d5b2a3f0-6cde-4b2b-9f11-5e2f4f0b7b00",
    "description": "Comprehensive Postman collection for the Cultour Go-based REST API. Includes CRUD endpoints grouped by domain, realistic request bodies, headers, query params, example responses, basic tests, and pre-request scripts.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "base_url", "value": "http://localhost:8181", "type": "string" },
    { "key": "auth_token", "value": "", "type": "string" },
    { "key": "user_id", "value": "00000000-0000-0000-0000-000000000000", "type": "string" },
    { "key": "profile_id", "value": "00000000-0000-0000-0000-000000000000", "type": "string" },
    { "key": "badge_id", "value": "00000000-0000-0000-0000-000000000000", "type": "string" },
    { "key": "event_id", "value": "00000000-0000-0000-0000-000000000000", "type": "string" },
    { "key": "thread_id", "value": "00000000-0000-0000-0000-000000000000", "type": "string" },
    { "key": "message_id", "value": "00000000-0000-0000-0000-000000000000", "type": "string" },
    { "key": "province_id", "value": "00000000-0000-0000-0000-000000000000", "type": "string" },
    { "key": "city_id", "value": "00000000-0000-0000-0000-000000000000", "type": "string" },
    { "key": "location_id", "value": "00000000-0000-0000-0000-000000000000", "type": "string" },
    { "key": "session_id", "value": "", "type": "string" }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Collection-level pre-request script: nothing mandatory here.",
          "// You can dynamically compute timestamps or nonces if needed.",
          "pm.variables.set('now_iso', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Collection-level baseline tests - per-request tests override/extend as needed.",
          "pm.test('Response time is acceptable', function () { pm.expect(pm.response.responseTime).to.be.below(5000); });"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Users",
      "description": "User account management endpoints",
      "item": [
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"phone\": \"+1234567890\",\n  \"password\": \"Password123!\",\n  \"role\": \"user\"\n}"
            },
            "description": "Registers a new user account."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status is 201', () => pm.response.to.have.status(201));",
                  "pm.test('Success flag true', () => pm.expect(pm.response.json().success).to.be.true);",
                  "const data = pm.response.json().data || {}; if (data.id) pm.environment.set('user_id', data.id);"
                ]
              }
            }
          ],
          "response": [
            {
              "name": "201 Created",
              "originalRequest": {},
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "body": "{\n  \"success\": true,\n  \"request_id\": \"e8d0f3e4-1234-5678-9abc-def012345678\",\n  \"timestamp\": \"2025-01-01T12:00:00Z\",\n  \"message\": \"User created successfully\",\n  \"data\": {\n    \"id\": \"{{user_id}}\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+1234567890\",\n    \"role\": \"user\",\n    \"created_at\": \"2025-01-01T12:00:00Z\"\n  }\n}"
            },
            {
              "name": "400 Validation Error",
              "originalRequest": {},
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "body": "{\n  \"success\": false,\n  \"request_id\": \"7aa4b3c2-1111-2222-3333-444455556666\",\n  \"timestamp\": \"2025-01-01T12:00:00Z\",\n  \"message\": \"Validation failed\",\n  \"error\": {\n    \"code\": \"validation_error\",\n    \"details\": \"Invalid request body\"\n  }\n}"
            }
          ]
        },
        {
          "name": "List Users (admin)",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "{{auth_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/users?limit=10&offset=0&sort_by=created_at&sort_order=desc",
              "host": ["{{base_url}}"],
              "path": ["users"],
              "query": [
                { "key": "limit", "value": "10" },
                { "key": "offset", "value": "0" },
                { "key": "sort_by", "value": "created_at" },
                { "key": "sort_order", "value": "desc" }
              ]
            },
            "description": "Lists users (requires admin)."
          },
          "event": [
            {
              "listen": "test",
              "script": { "exec": [
                "pm.test('Status 200', () => pm.response.to.have.status(200));",
                "const json = pm.response.json(); pm.expect(json).to.have.property('data');",
                "if (Array.isArray(json.data) && json.data[0] && json.data[0].id) pm.environment.set('user_id', json.data[0].id);"
              ]}
            }
          ]
        },
        {
          "name": "Search Users (admin)",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": {
              "raw": "{{base_url}}/users/search?query=john&limit=10&offset=0",
              "host": ["{{base_url}}"],
              "path": ["users","search"],
              "query": [
                { "key": "query", "value": "john" },
                { "key": "limit", "value": "10" },
                { "key": "offset", "value": "0" }
              ]
            },
            "description": "Search users by keyword (admin)."
          },
          "event": [ { "listen": "test", "script": { "exec": [
            "pm.test('Status 200', () => pm.response.to.have.status(200));",
            "pm.expect(pm.response.json()).to.have.property('data');"
          ]}} ]
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/{{user_id}}", "host": ["{{base_url}}"], "path": ["users","{{user_id}}"] },
            "description": "Get user detail by ID."
          },
          "event": [ { "listen": "test", "script": { "exec": [
            "pm.test('Status 200', () => pm.response.to.have.status(200));",
            "pm.expect(pm.response.json()).to.have.property('data');"
          ]}} ]
        },
        {
          "name": "Update User (admin)",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/{{user_id}}", "host": ["{{base_url}}"], "path": ["users","{{user_id}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"email\": \"john.updated@example.com\",\n  \"phone\": \"+1234567000\"\n}" },
            "description": "Update a user (admin)."
          },
          "event": [ { "listen": "test", "script": { "exec": [
            "pm.test('Status 200', () => pm.response.to.have.status(200));"
          ]}} ]
        },
        {
          "name": "Delete User (admin)",
          "request": {
            "method": "DELETE",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/{{user_id}}", "host": ["{{base_url}}"], "path": ["users","{{user_id}}"] },
            "description": "Delete a user (admin)."
          },
          "event": [ { "listen": "test", "script": { "exec": [
            "pm.test('Status 200', () => pm.response.to.have.status(200));"
          ]}} ]
        }
      ]
    },
    {
      "name": "User Profiles",
      "description": "User profile management, including avatar and identity upload",
      "item": [
        {
          "name": "Create Profile",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/profiles", "host": ["{{base_url}}"], "path": ["users","profiles"] },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fullname\": \"John Doe\",\n  \"bio\": \"Traveler and explorer\",\n  \"avatar_url\": \"https://example.com/avatar.jpg\"\n}"
            },
            "description": "Create profile for authenticated user."
          },
          "event": [ { "listen": "test", "script": { "exec": [
            "pm.test('Status 201', () => pm.response.to.have.status(201));",
            "const data = pm.response.json().data || {}; if (data.id) pm.environment.set('profile_id', data.id);"
          ]}} ]
        },
        {
          "name": "List Profiles (admin)",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/profiles?page=1&per_page=10&sort_by=created_at&sort_order=desc", "host": ["{{base_url}}"], "path": ["users","profiles"], "query": [
              { "key": "page", "value": "1" }, { "key": "per_page", "value": "10" }, { "key": "sort_by", "value": "created_at" }, { "key": "sort_order", "value": "desc" }
            ] },
            "description": "List user profiles (admin)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Search Profiles (admin)",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/profiles/search?query=john&limit=10&offset=0", "host": ["{{base_url}}"], "path": ["users","profiles","search"], "query": [
              { "key": "query", "value": "john" }, { "key": "limit", "value": "10" }, { "key": "offset", "value": "0" }
            ] },
            "description": "Search profiles (admin)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Get My Profile",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/profiles/me", "host": ["{{base_url}}"], "path": ["users","profiles","me"] },
            "description": "Get profile for the authenticated user."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Get Profile by ID",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/profiles/{{profile_id}}", "host": ["{{base_url}}"], "path": ["users","profiles","{{profile_id}}"] },
            "description": "Get profile by ID."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/profiles/{{profile_id}}", "host": ["{{base_url}}"], "path": ["users","profiles","{{profile_id}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"fullname\": \"John A. Doe\",\n  \"bio\": \"Updated bio\"\n}" },
            "description": "Update profile by ID."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Update Avatar (multipart)",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/profiles/{{profile_id}}/avatar", "host": ["{{base_url}}"], "path": ["users","profiles","{{profile_id}}","avatar"] },
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "avatar", "type": "file", "src": [ "files/avatar.jpg" ] }
              ]
            },
            "description": "Upload a new avatar for the profile (multipart/form-data)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Verify Identity (multipart)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/profiles/{{profile_id}}/verify", "host": ["{{base_url}}"], "path": ["users","profiles","{{profile_id}}","verify"] },
            "body": { "mode": "formdata", "formdata": [ { "key": "identity_image", "type": "file", "src": [ "files/ktp.jpg" ] } ] },
            "description": "Upload KTP/identity image for verification."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Delete Profile (admin)",
          "request": {
            "method": "DELETE",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/profiles/{{profile_id}}", "host": ["{{base_url}}"], "path": ["users","profiles","{{profile_id}}"] },
            "description": "Delete a user profile (admin)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        }
      ]
    },
    {
      "name": "User Badges",
      "description": "Assign, list, count and remove user badges",
      "item": [
        {
          "name": "Assign Badge to Me (admin)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/badges", "host": ["{{base_url}}"], "path": ["users","badges"] },
            "body": { "mode": "raw", "raw": "{\n  \"badge_id\": \"{{badge_id}}\"\n}" },
            "description": "Assign a badge to the authenticated user (admin only)."
          },
          "event": [ { "listen": "test", "script": { "exec": [
            "pm.test('Status 201', () => pm.response.to.have.status(201));"
          ] } } ]
        },
        {
          "name": "List My Badges",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/badges?limit=10&offset=0&sort_by=created_at&sort_order=desc", "host": ["{{base_url}}"], "path": ["users","badges"], "query": [
              { "key": "limit", "value": "10" }, { "key": "offset", "value": "0" }, { "key": "sort_by", "value": "created_at" }, { "key": "sort_order", "value": "desc" }
            ] },
            "description": "List badges for the authenticated user."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Get Badges by User ID",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/badges/{{user_id}}", "host": ["{{base_url}}"], "path": ["users","badges","{{user_id}}"] },
            "description": "Get badges for a specific user ID."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Count My Badges",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/badges/count", "host": ["{{base_url}}"], "path": ["users","badges","count"] },
            "description": "Count badges for the authenticated user."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Remove Badge from Me (admin)",
          "request": {
            "method": "DELETE",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/users/badges?badge_id={{badge_id}}", "host": ["{{base_url}}"], "path": ["users","badges"], "query": [ { "key": "badge_id", "value": "{{badge_id}}" } ] },
            "description": "Remove a badge from the authenticated user (admin only)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        }
      ]
    },
    {
      "name": "Badges",
      "description": "Achievement badges CRUD (admin for write operations)",
      "item": [
        {
          "name": "Create Badge (admin)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/badges", "host": ["{{base_url}}"], "path": ["badges"] },
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Master Explorer\",\n  \"description\": \"Visited 50 unique locations\",\n  \"icon_url\": \"https://cdn.example.com/badges/master-explorer.png\"\n}" },
            "description": "Create a new badge (admin)."
          },
          "event": [ { "listen": "test", "script": { "exec": [
            "pm.test('Status 201', () => pm.response.to.have.status(201));",
            "const data = pm.response.json().data || {}; if (data.id) pm.environment.set('badge_id', data.id);"
          ]}} ]
        },
        {
          "name": "List Badges",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/badges?limit=10&offset=0&sort_by=created_at&sort_order=desc", "host": ["{{base_url}}"], "path": ["badges"], "query": [
              { "key": "limit", "value": "10" }, { "key": "offset", "value": "0" }, { "key": "sort_by", "value": "created_at" }, { "key": "sort_order", "value": "desc" }
            ] },
            "description": "List badges (auth required)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Search Badges",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/badges/search?query=explorer&limit=10&offset=0", "host": ["{{base_url}}"], "path": ["badges","search"], "query": [
              { "key": "query", "value": "explorer" }, { "key": "limit", "value": "10" }, { "key": "offset", "value": "0" }
            ] },
            "description": "Search badges (auth required)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Count Badges",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/badges/count?name=Explorer", "host": ["{{base_url}}"], "path": ["badges","count"], "query": [ { "key": "name", "value": "Explorer" } ] },
            "description": "Count badges with optional name filter."
          }
        },
        {
          "name": "Get Badge by ID",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/badges/{{badge_id}}", "host": ["{{base_url}}"], "path": ["badges","{{badge_id}}"] },
            "description": "Get badge details by ID."
          }
        },
        {
          "name": "Update Badge (admin)",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/badges/{{badge_id}}", "host": ["{{base_url}}"], "path": ["badges","{{badge_id}}"] },
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Advanced Explorer\",\n  \"description\": \"Visited 75 unique locations\",\n  \"icon_url\": \"https://cdn.example.com/badges/advanced-explorer.png\"\n}" },
            "description": "Update badge (admin)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Delete Badge (admin)",
          "request": {
            "method": "DELETE",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/badges/{{badge_id}}", "host": ["{{base_url}}"], "path": ["badges","{{badge_id}}"] },
            "description": "Delete badge (admin)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        }
      ]
    },
    {
      "name": "Events",
      "description": "Cultural events (multipart for create/update)",
      "item": [
        {
          "name": "Create Event (multipart; admin or warlok)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/events", "host": ["{{base_url}}"], "path": ["events"] },
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "name", "value": "Summer Music Festival", "type": "text" },
                { "key": "description", "value": "A vibrant music festival featuring local and international artists", "type": "text" },
                { "key": "location", "value": "{\\\"id\\\":\\\"{{location_id}}\\\",\\\"name\\\":\\\"Monas\\\",\\\"city_id\\\":\\\"{{city_id}}\\\",\\\"latitude\\\":-6.175392,\\\"longitude\\\":106.827153}", "type": "text" },
                { "key": "start_date", "value": "2025-08-01T10:00:00Z", "type": "text" },
                { "key": "end_date", "value": "2025-08-02T18:00:00Z", "type": "text" },
                { "key": "is_kid_friendly", "value": "true", "type": "text" },
                { "key": "image", "type": "file", "src": [ "files/event.jpg" ] }
              ]
            },
            "description": "Create a new event. Dates accept RFC3339 or YYYY-MM-DD. Location is JSON string."
          },
          "event": [ { "listen": "test", "script": { "exec": [
            "pm.test('Status 200 or 201', () => pm.expect([200,201]).to.include(pm.response.code));",
            "const data = pm.response.json().data || {}; if (data.id) pm.environment.set('event_id', data.id);"
          ]} } ]
        },
        {
          "name": "List Events",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/events?page=1&per_page=10&sort_by=created_at&sort_order=desc", "host": ["{{base_url}}"], "path": ["events"], "query": [
              { "key": "page", "value": "1" }, { "key": "per_page", "value": "10" }, { "key": "sort_by", "value": "created_at" }, { "key": "sort_order", "value": "desc" }
            ] },
            "description": "List events (public)."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Search Events",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/events/search?query=music&page=1&per_page=10", "host": ["{{base_url}}"], "path": ["events","search"], "query": [
              { "key": "query", "value": "music" }, { "key": "page", "value": "1" }, { "key": "per_page", "value": "10" }
            ] },
            "description": "Search events (public)."
          }
        },
        {
          "name": "Get Trending Events",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/events/trending?limit=5", "host": ["{{base_url}}"], "path": ["events","trending"], "query": [ { "key": "limit", "value": "5" } ] },
            "description": "Get trending events (public)."
          }
        },
        {
          "name": "Get Related Events",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/events/{{event_id}}/related?location_id={{location_id}}&limit=5", "host": ["{{base_url}}"], "path": ["events","{{event_id}}","related"], "query": [ { "key": "location_id", "value": "{{location_id}}" }, { "key": "limit", "value": "5" } ] },
            "description": "Get related events for the given event ID (public)."
          }
        },
        {
          "name": "Get Event by ID",
          "request": { "method": "GET", "url": { "raw": "{{base_url}}/events/{{event_id}}", "host": ["{{base_url}}"], "path": ["events","{{event_id}}"] } }
        },
        {
          "name": "Increment Event Views (auth)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/events/{{event_id}}/views", "host": ["{{base_url}}"], "path": ["events","{{event_id}}","views"] },
            "description": "Increment view counter for event."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Update Event (multipart; admin or warlok)",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ],
            "url": { "raw": "{{base_url}}/events/{{event_id}}", "host": ["{{base_url}}"], "path": ["events","{{event_id}}"] },
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "name", "value": "Summer Music Festival (Updated)", "type": "text" },
                { "key": "description", "value": "Updated description", "type": "text" },
                { "key": "start_date", "value": "2025-08-01", "type": "text" },
                { "key": "end_date", "value": "2025-08-03", "type": "text" },
                { "key": "is_kid_friendly", "value": "false", "type": "text" },
                { "key": "image", "type": "file", "src": [ "files/event-updated.jpg" ] }
              ]
            },
            "description": "Update an existing event (multipart/form-data)."
          }
        },
        {
          "name": "Delete Event (admin or warlok)",
          "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/events/{{event_id}}", "host": ["{{base_url}}"], "path": ["events","{{event_id}}"] } }
        }
      ]
    },
    {
      "name": "Discussion",
      "description": "Threads and Messages",
      "item": [
        {
          "name": "Threads",
          "item": [
            {
              "name": "Create Thread (auth)",
              "request": {
                "method": "POST",
                "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ],
                "url": { "raw": "{{base_url}}/threads", "host": ["{{base_url}}"], "path": ["threads"] },
                "body": { "mode": "raw", "raw": "{\n  \"event_id\": \"{{event_id}}\",\n  \"status\": \"active\"\n}" },
                "description": "Create a new discussion thread for an event."
              },
              "event": [ { "listen": "test", "script": { "exec": [
                "pm.test('Status 201 or 200', () => pm.expect([200,201]).to.include(pm.response.code));",
                "const data = pm.response.json().data || {}; if (data.id) pm.environment.set('thread_id', data.id);"
              ]} } ]
            },
            {
              "name": "List Threads (auth)",
              "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/threads?page=1&per_page=10&sort_by=created_at&sort_order=desc", "host": ["{{base_url}}"], "path": ["threads"], "query": [ {"key":"page","value":"1"},{"key":"per_page","value":"10"},{"key":"sort_by","value":"created_at"},{"key":"sort_order","value":"desc"} ] } }
            },
            {
              "name": "Search Threads (auth)",
              "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/threads/search?query=discussion&per_page=10&page=1", "host": ["{{base_url}}"], "path": ["threads","search"], "query": [ {"key":"query","value":"discussion"},{"key":"per_page","value":"10"},{"key":"page","value":"1"} ] } }
            },
            {
              "name": "Get Thread by ID (auth)",
              "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/threads/{{thread_id}}", "host": ["{{base_url}}"], "path": ["threads","{{thread_id}}"] } }
            },
            { "name": "Update Thread (auth)", "request": { "method": "PUT", "header": [ {"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"{{auth_token}}"} ], "url": { "raw": "{{base_url}}/threads/{{thread_id}}", "host": ["{{base_url}}"], "path": ["threads","{{thread_id}}"] }, "body": { "mode": "raw", "raw": "{\n  \"status\": \"closed\"\n}" } } },
            { "name": "Delete Thread (auth)", "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/threads/{{thread_id}}", "host": ["{{base_url}}"], "path": ["threads","{{thread_id}}"] } } },
            { "name": "Join Thread (auth)", "request": { "method": "POST", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/threads/{{thread_id}}/join", "host": ["{{base_url}}"], "path": ["threads","{{thread_id}}","join"] } } },
            { "name": "Get Thread by Event (auth)", "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/threads/event/{{event_id}}", "host": ["{{base_url}}"], "path": ["threads","event","{{event_id}}"] } } }
          ]
        },
        {
          "name": "Messages",
          "item": [
            {
              "name": "Create Message (auth)",
              "request": {
                "method": "POST",
                "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ],
                "url": { "raw": "{{base_url}}/messages", "host": ["{{base_url}}"], "path": ["messages"] },
                "body": { "mode": "raw", "raw": "{\n  \"thread_id\": \"{{thread_id}}\",\n  \"content\": \"Hello, this is a discussion message\",\n  \"type\": \"discussion\"\n}" },
                "description": "Create a message inside a thread. Sender is inferred from JWT."
              },
              "event": [ { "listen": "test", "script": { "exec": [
                "pm.test('Status 201', () => pm.response.to.have.status(201));",
                "const data = pm.response.json().data || {}; if (data.id) pm.environment.set('message_id', data.id);"
              ]} } ]
            },
            {
              "name": "List Messages (auth)",
              "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/messages?page=1&per_page=10&sort_by=created_at&sort_order=desc&thread_id={{thread_id}}", "host": ["{{base_url}}"], "path": ["messages"], "query": [ {"key":"page","value":"1"},{"key":"per_page","value":"10"},{"key":"sort_by","value":"created_at"},{"key":"sort_order","value":"desc"},{"key":"thread_id","value":"{{thread_id}}"} ] } }
            },
            { "name": "Search Messages (auth)", "request": { "method": "GET", "header": [ {"key":"Authorization","value":"{{auth_token}}"} ], "url": { "raw": "{{base_url}}/messages/search?query=hello&page=1&per_page=10", "host": ["{{base_url}}"], "path": ["messages","search"], "query": [ {"key":"query","value":"hello"},{"key":"page","value":"1"},{"key":"per_page","value":"10"} ] } } },
            { "name": "Get Messages by Thread (auth)", "request": { "method": "GET", "header": [ {"key":"Authorization","value":"{{auth_token}}"} ], "url": { "raw": "{{base_url}}/messages/thread/{{thread_id}}", "host": ["{{base_url}}"], "path": ["messages","thread","{{thread_id}}"] } } },
            { "name": "Update Message (auth)", "request": { "method": "PUT", "header": [ {"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"{{auth_token}}"} ], "url": { "raw": "{{base_url}}/messages/{{message_id}}", "host": ["{{base_url}}"], "path": ["messages","{{message_id}}"] }, "body": { "mode": "raw", "raw": "{\n  \"content\": \"Updated message content\"\n}" } } },
            { "name": "Delete Message (auth)", "request": { "method": "DELETE", "header": [ {"key":"Authorization","value":"{{auth_token}}"} ], "url": { "raw": "{{base_url}}/messages/{{message_id}}", "host": ["{{base_url}}"], "path": ["messages","{{message_id}}"] } } }
          ]
        }
      ]
    },
    {
      "name": "Places",
      "description": "Provinces, Cities, Locations",
      "item": [
        {
          "name": "Provinces",
          "item": [
            { "name": "Create Province (admin/warlok)", "request": { "method": "POST", "header": [ {"key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/provinces", "host": ["{{base_url}}"], "path": ["provinces"] }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"West Java\",\n  \"description\": \"A beautiful province with rich cultural heritage\"\n}" } } },
            { "name": "List Provinces", "request": { "method": "GET", "url": { "raw": "{{base_url}}/provinces?page=1&per_page=10&sort_by=created_at&sort_order=desc", "host": ["{{base_url}}"], "path": ["provinces"], "query": [ {"key":"page","value":"1"},{"key":"per_page","value":"10"},{"key":"sort_by","value":"created_at"},{"key":"sort_order","value":"desc"} ] } } },
            { "name": "Search Provinces", "request": { "method": "GET", "url": { "raw": "{{base_url}}/provinces/search?query=Java&page=1&per_page=10", "host": ["{{base_url}}"], "path": ["provinces","search"], "query": [ {"key":"query","value":"Java"},{"key":"page","value":"1"},{"key":"per_page","value":"10"} ] } } },
            { "name": "Get Province by ID", "request": { "method": "GET", "url": { "raw": "{{base_url}}/provinces/{{province_id}}", "host": ["{{base_url}}"], "path": ["provinces","{{province_id}}"] } } },
            { "name": "Update Province (admin/warlok)", "request": { "method": "PUT", "header": [ {"key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/provinces/{{province_id}}", "host": ["{{base_url}}"], "path": ["provinces","{{province_id}}"] }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"Greater West Java\",\n  \"description\": \"Updated province description\"\n}" } } },
            { "name": "Delete Province (admin/warlok)", "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/provinces/{{province_id}}", "host": ["{{base_url}}"], "path": ["provinces","{{province_id}}"] } } }
          ]
        },
        {
          "name": "Cities",
          "item": [
            { "name": "Create City (admin)", "request": { "method": "POST", "header": [ {"key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/cities", "host": ["{{base_url}}"], "path": ["cities"] }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"Bandung\",\n  \"description\": \"Cool weather city\",\n  \"province_id\": \"{{province_id}}\",\n  \"image_url\": \"https://example.com/bandung.jpg\"\n}" } } },
            { "name": "List Cities", "request": { "method": "GET", "url": { "raw": "{{base_url}}/cities?page=1&per_page=10&sort_by=created_at&sort_order=desc&province_id={{province_id}}", "host": ["{{base_url}}"], "path": ["cities"], "query": [ {"key":"page","value":"1"},{"key":"per_page","value":"10"},{"key":"sort_by","value":"created_at"},{"key":"sort_order","value":"desc"},{"key":"province_id","value":"{{province_id}}"} ] } } },
            { "name": "Search Cities", "request": { "method": "GET", "url": { "raw": "{{base_url}}/cities/search?query=Bandung&page=1&per_page=10", "host": ["{{base_url}}"], "path": ["cities","search"], "query": [ {"key":"query","value":"Bandung"},{"key":"page","value":"1"},{"key":"per_page","value":"10"} ] } } },
            { "name": "Get City by ID", "request": { "method": "GET", "url": { "raw": "{{base_url}}/cities/{{city_id}}", "host": ["{{base_url}}"], "path": ["cities","{{city_id}}"] } } },
            { "name": "Update City (admin)", "request": { "method": "PUT", "header": [ {"key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/cities/{{city_id}}", "host": ["{{base_url}}"], "path": ["cities","{{city_id}}"] }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"Bandung Kota\",\n  \"description\": \"Updated description\",\n  \"province_id\": \"{{province_id}}\",\n  \"image_url\": \"https://example.com/bandung-updated.jpg\"\n}" } } },
            { "name": "Delete City (admin)", "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/cities/{{city_id}}", "host": ["{{base_url}}"], "path": ["cities","{{city_id}}"] } } }
          ]
        },
        {
          "name": "Locations",
          "item": [
            { "name": "Create Location (admin/warlok)", "request": { "method": "POST", "header": [ {"key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/locations", "host": ["{{base_url}}"], "path": ["locations"] }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"Monas\",\n  \"city_id\": \"{{city_id}}\",\n  \"latitude\": -6.175392,\n  \"longitude\": 106.827153\n}" } } },
            { "name": "List Locations", "request": { "method": "GET", "url": { "raw": "{{base_url}}/locations?page=1&per_page=10&city_id={{city_id}}", "host": ["{{base_url}}"], "path": ["locations"], "query": [ {"key":"page","value":"1"},{"key":"per_page","value":"10"},{"key":"city_id","value":"{{city_id}}"} ] } } },
            { "name": "Search Locations", "request": { "method": "GET", "url": { "raw": "{{base_url}}/locations/search?query=Monas&page=1&per_page=10&city_id={{city_id}}", "host": ["{{base_url}}"], "path": ["locations","search"], "query": [ {"key":"query","value":"Monas"},{"key":"page","value":"1"},{"key":"per_page","value":"10"},{"key":"city_id","value":"{{city_id}}"} ] } } },
            { "name": "Get Location by ID", "request": { "method": "GET", "url": { "raw": "{{base_url}}/locations/{{location_id}}", "host": ["{{base_url}}"], "path": ["locations","{{location_id}}"] } } },
            { "name": "Update Location (admin/warlok)", "request": { "method": "PUT", "header": [ {"key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/locations/{{location_id}}", "host": ["{{base_url}}"], "path": ["locations","{{location_id}}"] }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"National Monument\",\n  \"city_id\": \"{{city_id}}\",\n  \"latitude\": -6.1754,\n  \"longitude\": 106.8272\n}" } } },
            { "name": "Delete Location (admin/warlok)", "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "{{auth_token}}" } ], "url": { "raw": "{{base_url}}/locations/{{location_id}}", "host": ["{{base_url}}"], "path": ["locations","{{location_id}}"] } } }
          ]
        }
      ]
    },
    {
      "name": "AI (Gemini)",
      "description": "AI chat and event description generation",
      "item": [
        {
          "name": "Create Chat Session",
          "request": {
            "method": "POST",
            "header": [ 
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "{{auth_token}}" }
            ],
            "url": { "raw": "{{base_url}}/ai/chat/session", "host": ["{{base_url}}"], "path": ["ai","chat","session"] },
            "body": { "mode": "raw", "raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"event_id\": \"{{event_id}}\"\n}" },
            "description": "Create an AI chat session (optionally tied to an event)."
          },
          "event": [ { "listen": "test", "script": { "exec": [
            "pm.test('Status 200', () => pm.response.to.have.status(200));",
            "const data = pm.response.json().data || {}; if (data.session_id) pm.environment.set('session_id', data.session_id);"
          ]}} ]
        },
        {
          "name": "Send Chat Message",
          "request": {
            "method": "POST",
            "header": [ 
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "{{auth_token}}" }
            ],
            "url": { "raw": "{{base_url}}/ai/chat/{{session_id}}/message", "host": ["{{base_url}}"], "path": ["ai","chat","{{session_id}}","message"] },
            "body": { "mode": "raw", "raw": "{\n  \"message\": \"Recommend cultural events in Jakarta\"\n}" },
            "description": "Send a user message within an AI chat session."
          },
          "event": [ { "listen": "test", "script": { "exec": [ "pm.test('Status 200', ()=> pm.response.to.have.status(200));" ] } } ]
        },
        {
          "name": "Generate Event Description",
          "request": {
            "method": "POST",
            "header": [ 
              { "key": "Content-Type", "value": "application/json" }, 
              { "key": "Authorization", "value": "{{auth_token}}" } 
            ],
            "url": { "raw": "{{base_url}}/ai/events/description", "host": ["{{base_url}}"], "path": ["ai","events","description"] },
            "body": { "mode": "raw", "raw": "{\n  \"title\": \"Festival Tari Tradisional Nusantara\",\n  \"additional_context\": \"Fokus pada keberagaman budaya dan penampilan lintas daerah\"\n}" },
            "description": "Generate AI event description based on title and optional additional_context."
          }
        }
      ]
    }
  ]
}
