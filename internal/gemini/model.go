package gemini

import (
	"time"

	"github.com/google/uuid"
)

// AiMessage represents a message in an AI conversation
// @Description Comprehensive AI conversation message capturing detailed interaction details
// @Tags AI Communication
type AiMessage struct {
	// Unique identifier for the AI response
	// @Description Globally unique UUID for tracking and referencing the specific AI message
	// @Example "550e8400-e29b-41d4-a716-446655440000"
	ID uuid.UUID `json:"id" db:"id"`

	// Detailed content of the AI response
	// @Description Full textual content generated by the AI in response to a query
	// @Example "Here are some fascinating cultural events happening in Jakarta this month, including traditional Javanese dance performances and local music festivals."
	// @Required true
	// @MinLength 1
	// @MaxLength 5000
	Content string `json:"content" db:"content" validate:"required,min=1,max=5000"`

	// User ID associated with the response
	// @Description Optional identifier linking the AI message to a specific user account
	// @Example "550e8400-e29b-41d4-a716-446655440001"
	UserID uuid.UUID `json:"user_id,omitempty" db:"user_id"`

	// Timestamp when the response was created
	// @Description Precise timestamp indicating when the AI message was initially generated
	// @Example "2023-06-15T14:30:00Z"
	CreatedAt *time.Time `json:"created_at" db:"created_at"`

	// Timestamp when the response was last updated
	// @Description Timestamp of the most recent modification to the AI message
	// @Example "2023-06-15T14:30:05Z"
	UpdatedAt *time.Time `json:"updated_at" db:"updated_at"`
}

// AiMessageDTO represents the data transfer object for AI response
// @Description Simplified data transfer object for transmitting essential AI message details
// @Tags AI Communication
type AiMessageDTO struct {
	// Unique identifier for the AI response
	// @Description Globally unique UUID for tracking the specific AI message
	// @Example "550e8400-e29b-41d4-a716-446655440000"
	ID uuid.UUID `json:"id"`

	// Detailed content of the AI response
	// @Description Condensed textual content generated by the AI
	// @Example "Discover Jakarta's vibrant cultural scene with traditional performances and local festivals."
	Content string `json:"content"`

	// Timestamp when the response was created
	// @Description Precise timestamp of AI message generation
	// @Example "2023-06-15T14:30:00Z"
	CreatedAt *time.Time `json:"created_at"`
}

// ToDTO converts an AiResponse to an AiResponseDTO
// @Description Transforms a full AiMessage into a lightweight AiMessageDTO for efficient data transfer
// @Return AiMessageDTO Simplified representation of the AI message
func (ar *AiMessage) ToDTO() AiMessageDTO {
	return AiMessageDTO{
		ID:        ar.ID,
		Content:   ar.Content,
		CreatedAt: ar.CreatedAt,
	}
}

// AiRequest represents an incoming AI query request with enhanced details
// @Description Comprehensive AI query request capturing user's intent and optional contextual information
// @Tags AI Communication
type AiRequest struct {
	// Main query or prompt for the AI
	// @Description Primary textual input defining the user's request or question
	// @Example "Recommend cultural events in Jakarta"
	// @Required true
	// @MinLength 5
	// @MaxLength 500
	Query string `json:"query" validate:"required,min=5,max=500"`

	// Optional additional context for more precise responses
	// @Description Supplementary information to help the AI generate more tailored and relevant responses
	// @Example "User is interested in traditional music and dance performances"
	// @MaxLength 1000
	Context string `json:"context,omitempty" validate:"omitempty,max=1000"`

	// User ID associated with the request
	// @Description Optional identifier linking the AI request to a specific user account
	// @Example "550e8400-e29b-41d4-a716-446655440001"
	UserID uuid.UUID `json:"user_id,omitempty"`
}

// Request and Response Structures
type GenerateEventDescriptionRequest struct {
	Title             string `json:"title" binding:"required"`
	AdditionalContext string `json:"additional_context,omitempty"`
}

// CreateChatSessionRequest represents the request payload for creating a chat session
// @Description Detailed request structure for initiating an AI chat session with user authentication
type CreateChatSessionRequest struct {
	// UserID is the unique identifier of the user creating the session
	// @Required true
	// @Example "user123"
	UserID string `json:"user_id" binding:"required"`

	// Optional EventID to provide context for the chat session, enhancing personalization
	// @Optional true
	// @Example "event456"
	EventID *string `json:"event_id,omitempty"`
}

// CreateChatSessionResponse represents the response after creating a chat session
// @Description Response containing the unique session identifier for subsequent interactions
type CreateChatSessionResponse struct {
	// Unique identifier for the created chat session, used for message exchange
	// @Example "session789"
	SessionID string `json:"session_id"`
}

// SendMessageRequest represents the request payload for sending a message in a chat session
// @Description Request structure for sending a message to the AI with content validation
type SendMessageRequest struct {
	// Unique identifier for the created chat session, used for message exchange
	// @Example "session789"
	SessionID string `json:"session_id"`

	// Message content to be sent to the AI, with length restriction
	// @Required true
	// @Max length 500
	// @Example "Tell me about the cultural significance of this event"
	Message string `json:"message" binding:"required,max=500"`
}

// SendMessageResponse represents the AI's response to a message
// @Description Response from the AI containing multiple lines of contextual text
type SendMessageResponse struct {
	// Multiple lines of the AI's response, providing a comprehensive answer
	// @Example ["The event represents...", "Its cultural importance lies in..."]
	Response []string `json:"response"`
}

// EventDescriptionResponse represents the AI-generated event description
// @Description Response containing a rich, AI-generated description of a cultural event
type EventDescriptionResponse struct {
	// Comprehensive description of the event, generated by AI analysis
	// @Example "This vibrant cultural event showcases the traditional dance of the region..."
	Description string `json:"description"`
}
