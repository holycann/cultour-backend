package models

import (
	"time"

	"github.com/google/uuid"
	userModels "github.com/holycann/cultour-backend/internal/users/models"
)

// MessageType represents the type of message in the discussion system
// @Description Enumeration of possible message types in the discussion platform
// @Description Allows differentiation between user-generated and AI-generated messages
type MessageType string

// Enum values for MessageType
// @Description Predefined message type constants for system categorization
const (
	// DiscussionMessageType represents standard user-to-user messages
	// @Description Standard messages created by users in a discussion thread
	DiscussionMessageType MessageType = "discussion"

	// AIMessageType represents messages generated by AI systems
	// @Description Automated or AI-generated messages in the discussion context
	AIMessageType MessageType = "ai"
)

// Message represents a message entity in the discussion system
// @Description Comprehensive model for tracking messages within discussion threads
// @Description Captures message details, sender information, and system metadata
// @Tags Discussion Messages
type Message struct {
	// Unique identifier for the message
	// @Description Globally unique UUID for the message, generated automatically
	// @Description Serves as the primary key and reference for the message
	// @Example "message_123"
	// @Format uuid
	ID uuid.UUID `json:"id" db:"id" validate:"required"`

	// Reference to the thread the message belongs to
	// @Description Unique identifier linking the message to a specific discussion thread
	// @Description Enables message organization and context tracking
	// @Example "thread_456"
	// @Format uuid
	ThreadID uuid.UUID `json:"thread_id" db:"thread_id" validate:"required"`

	// Reference to the user who sent the message
	// @Description Unique identifier of the message sender
	// @Description Provides attribution and user tracking
	// @Example "user_789"
	// @Format uuid
	SenderID uuid.UUID `json:"sender_id" db:"sender_id" validate:"required"`

	// Message content
	// @Description Actual text content of the message
	// @Description Supports rich text communication within threads
	// @Example "Hello, this is a discussion message"
	// @MaxLength 1000
	Content string `json:"content" db:"content" validate:"required,max=1000"`

	// Type of message
	// @Description Categorizes the message based on its origin or purpose
	// @Description Helps distinguish between user and AI-generated messages
	// @Example "discussion"
	Type MessageType `json:"type" db:"type" validate:"required,oneof=discussion ai"`

	// Timestamp when the message was created
	// @Description Precise timestamp of message creation in UTC
	// @Description Helps track message chronology and order
	// @Format date-time
	CreatedAt *time.Time `json:"created_at" db:"created_at"`

	// Timestamp when the message was last updated
	// @Description Precise timestamp of the last modification to the message in UTC
	// @Description Indicates when message content was edited
	// @Format date-time
	UpdatedAt *time.Time `json:"updated_at" db:"updated_at"`
}

// MessageDTO represents a detailed data transfer object for messages
// @Description Comprehensive message data transfer object with additional context
// @Description Used for API responses to provide rich message information
// @Tags Discussion Messages
type MessageDTO struct {
	// Unique identifier for the message
	// @Description Globally unique UUID for the message
	// @Example "message_123"
	// @Format uuid
	ID uuid.UUID `json:"id"`

	// Reference to the thread the message belongs to
	// @Description Unique identifier linking the message to a specific discussion thread
	// @Example "thread_456"
	// @Format uuid
	ThreadID uuid.UUID `json:"thread_id"`

	// Message content
	// @Description Actual text content of the message
	// @Example "Hello, this is a discussion message"
	Content string `json:"content"`

	// Type of message
	// @Description Categorizes the message based on its origin or purpose
	// @Example "discussion"
	Type MessageType `json:"type"`

	// Timestamp when the message was created
	// @Description Precise timestamp of message creation in UTC
	// @Format date-time
	CreatedAt *time.Time `json:"created_at"`

	// Timestamp when the message was last updated
	// @Description Precise timestamp of the last modification to the message in UTC
	// @Format date-time
	UpdatedAt *time.Time `json:"updated_at"`

	// Sender's profile details
	// @Description Comprehensive information about the message sender
	// @Description Provides context and attribution for the message
	Sender *userModels.User `json:"sender,omitempty"`
}

// ToDTO converts a Message to a MessageDTO
// @Description Transforms a Message model into a lightweight data transfer object
// @Description Useful for API responses and data serialization
// @Return MessageDTO Converted message data transfer object
func (m *Message) ToDTO() MessageDTO {
	return MessageDTO{
		ID:        m.ID,
		ThreadID:  m.ThreadID,
		Content:   m.Content,
		Type:      m.Type,
		CreatedAt: m.CreatedAt,
		UpdatedAt: m.UpdatedAt,
	}
}

// CreateMessage represents the payload for creating or updating a message
// @Description Structured payload for message creation and update operations
// @Description Supports flexible input for different message types
// @Tags Discussion Messages
type CreateMessage struct {
	// Unique identifier for the message (optional for creation)
	// @Description Optional UUID for the message during creation or update
	// @Description Used to identify specific messages during updates
	// @Example "message_123"
	// @Format uuid
	ID uuid.UUID `json:"id,omitempty" validate:"omitempty"`

	// Reference to the thread the message belongs to
	// @Description Unique identifier linking the message to a specific discussion thread
	// @Description Required for message context and organization
	// @Example "thread_456"
	// @Format uuid
	ThreadID uuid.UUID `json:"thread_id" validate:"required"`

	// Reference to the user who sent the message
	// @Description Optional user ID for message sender
	// @Description Typically set automatically during message creation
	// @Example "user_789"
	// @Format uuid
	SenderID uuid.UUID `json:"sender_id,omitempty" validate:"omitempty"`

	// Message content
	// @Description Actual text content of the message
	// @Description Must be provided during message creation
	// @Example "Hello, this is a discussion message"
	// @MaxLength 1000
	Content string `json:"content" validate:"required,max=1000"`

	// Type of message
	// @Description Optional message type specification
	// @Description Defaults to discussion type if not specified
	// @Example "discussion"
	Type MessageType `json:"type,omitempty" validate:"omitempty,oneof=discussion ai"`
}
