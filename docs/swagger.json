{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Backend API for Cultour Project",
        "title": "Cultour API",
        "contact": {
            "name": "Cultour Development Team"
        },
        "version": "1.0"
    },
    "host": "localhost:8181",
    "paths": {
        "/ai/chat/session": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new AI chat session for a user, with optional event context for personalized interactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI"
                ],
                "summary": "Create a new AI chat session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Chat Session Creation Request with User ID and Optional Event Context",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_gemini.CreateChatSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created chat session with unique session identifier",
                        "schema": {
                            "$ref": "#/definitions/internal_gemini.CreateChatSessionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or missing user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "AI assistant feature is currently restricted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found in the system",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during session creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/ai/chat/{sessionID}/message": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a user message to the AI, retrieves the AI's response, and maintains conversation context",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI"
                ],
                "summary": "Send a message in an AI chat session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Unique Chat Session Identifier",
                        "name": "sessionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Message Request with Content Validation",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_gemini.SendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully processed message with multi-line AI response",
                        "schema": {
                            "$ref": "#/definitions/internal_gemini.SendMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or message exceeds length limit",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "AI assistant feature is currently restricted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Chat session not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error processing message",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/ai/events/description": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a rich, contextual description based on provided title and optional additional context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI"
                ],
                "summary": "Generate an AI-powered event description for a new event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Event Title and Optional Details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_gemini.GenerateEventDescriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully generated comprehensive event description",
                        "schema": {
                            "$ref": "#/definitions/internal_gemini.EventDescriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing event title",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Event exploration feature is currently restricted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error generating event description",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/badges": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of badges with optional filtering and sorting\nSupports pagination, sorting, and name-based filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Badges"
                ],
                "summary": "Retrieve a list of badges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of badges to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Number of badges to skip for pagination",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at",
                        "description": "Field to sort badges by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter badges by partial name match",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved badge list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_achievement_models.BadgeDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No badges found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to create a new achievement badge with detailed metadata\nRequires admin authentication and authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Badges"
                ],
                "summary": "Create a new badge in the system",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Badge Creation Details",
                        "name": "badge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_achievement_models.BadgeCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Badge successfully created with full details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_achievement_models.BadgeDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid badge creation payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required - missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges (admin role required)",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/badges/count": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the total count of badges in the system, with optional name filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Badges"
                ],
                "summary": "Count total number of badges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional filter to count badges by name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved badge count",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge count",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/badges/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Performs a full-text search across badge name, description, and other relevant fields\nSupports advanced search with pagination and relevance ranking",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Badges"
                ],
                "summary": "Search badges by query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minLength": 2,
                        "type": "string",
                        "description": "Search term for finding badges",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of search results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Number of results to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found matching badges",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_achievement_models.BadgeDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No badges match the search query",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge search",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/badges/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches detailed information about a badge by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Badges"
                ],
                "summary": "Retrieve a specific badge",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Badge Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved badge details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_achievement_models.BadgeDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid badge ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Badge not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to modify badge details by its unique identifier\nSupports partial updates with optional fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Badges"
                ],
                "summary": "Update an existing badge",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Badge Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Badge Update Payload",
                        "name": "badge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_achievement_models.BadgeUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Badge successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_achievement_models.BadgeDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid badge update payload or ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Badge not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Permanently removes a badge from the system by its unique identifier\nRequires administrative privileges",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Badges"
                ],
                "summary": "Delete a badge",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Badge Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Badge successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid badge ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Badge not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge deletion",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/cities": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of cities with optional filtering and sorting\nSupports advanced querying with flexible pagination and filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cities"
                ],
                "summary": "Retrieve cities list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of cities per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at",
                        "description": "Field to sort cities by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter cities by specific province",
                        "name": "province_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved cities list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.CityDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No cities found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during cities retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to add a new city to the system\nSupports creating cities with detailed information and optional image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cities"
                ],
                "summary": "Create a new city",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "City Creation Details",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.CityCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "City successfully created with full details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.CityDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid city creation payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required - missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges (admin role required)",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during city creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/cities/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Performs a full-text search across city details with advanced filtering\nAllows finding cities by keywords, province, and other attributes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cities"
                ],
                "summary": "Search cities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minLength": 2,
                        "type": "string",
                        "description": "Search term for finding cities",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of search results per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"relevance",
                        "description": "Field to sort search results",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter cities by specific province",
                        "name": "province_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully completed city search",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.CityDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No cities match the search query",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during city search",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/cities/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches comprehensive details of a city by its unique identifier\nReturns full city information including province details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cities"
                ],
                "summary": "Retrieve a specific city",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique City Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved city details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.CityDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid city ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during city retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to modify city details\nSupports partial updates with optional fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cities"
                ],
                "summary": "Update an existing city",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique City Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "City Update Payload",
                        "name": "city",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.CityUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "City successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.CityDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid city update payload or ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during city update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to permanently remove a city from the system\nDeletes the city and its associated resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cities"
                ],
                "summary": "Delete a city",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique City Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "City successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid city ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "City not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during city deletion",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of events with optional filtering and sorting\nSupports advanced querying with flexible pagination and filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Retrieve events list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of events per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at\"",
                        "description": "Field to sort events by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc\"",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter events by kid-friendliness",
                        "name": "is_kid_friendly",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved events list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_cultural_models.EventDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No events found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during events retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows authenticated users to add a new cultural event to the platform\nSupports multipart form data for event details and optional image upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Create a new cultural event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "maxLength": 100,
                        "minLength": 2,
                        "type": "string",
                        "description": "Event Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 500,
                        "type": "string",
                        "description": "Event Description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Location object as JSON (name, latitude, longitude)",
                        "name": "location",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start Date (RFC3339 or YYYY-MM-DD format)",
                        "name": "start_date",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End Date (RFC3339 or YYYY-MM-DD format)",
                        "name": "end_date",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Indicates if the event is suitable for children",
                        "name": "is_kid_friendly",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Event Cover Image (max 2MB)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event successfully created with full details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_cultural_models.EventDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid event creation details or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required - missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during event creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Performs a full-text search across event details with advanced filtering\nAllows finding events by keywords, location, and other attributes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Search events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minLength": 2,
                        "type": "string",
                        "description": "Search term for finding events",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of search results per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at\"",
                        "description": "Field to sort search results",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc\"",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully completed event search",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_cultural_models.EventDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No events match the search query",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during event search",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/trending": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a list of most popular or recently viewed events\nRanks events based on view count and recency",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Retrieve trending events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of trending events to retrieve",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved trending events",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_cultural_models.EventDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No trending events found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid limit parameter",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during trending events retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches comprehensive details of an event by its unique identifier\nReturns full event information including location, creator, and related metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Retrieve a specific event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Event Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved event details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_cultural_models.EventDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid event ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during event retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows event creator or administrator to modify event details\nSupports partial updates with multipart form data and optional image upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Update an existing event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Event Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maxLength": 100,
                        "minLength": 2,
                        "type": "string",
                        "description": "Updated Event Name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "maxLength": 500,
                        "type": "string",
                        "description": "Updated Event Description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Updated Location object as JSON",
                        "name": "location",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Updated Start Date (RFC3339 or YYYY-MM-DD format)",
                        "name": "start_date",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Updated End Date (RFC3339 or YYYY-MM-DD format)",
                        "name": "end_date",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Updated kid-friendly status",
                        "name": "is_kid_friendly",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "New Event Cover Image",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_cultural_models.EventDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid event update details or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during event update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows event creator or administrator to remove an event from the platform\nPermanently deletes the event and associated resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Delete an existing event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Event Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid event ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during event deletion",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}/related": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Finds events similar to a specific event based on location and other criteria\nHelps users discover nearby or thematically connected events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Retrieve related events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Reference Event Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional location filter for related events",
                        "name": "location_id",
                        "in": "query"
                    },
                    {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "default": 5,
                        "description": "Maximum number of related events to retrieve",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved related events",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_cultural_models.EventDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No related events found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid event ID or location ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during related events retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/events/{id}/views": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Tracks and updates the number of times an event has been viewed by users\nHelps in calculating event popularity and trending status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Increment event view count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Event Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event views successfully updated",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid event ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during view count update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/locations": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of locations with optional filtering and sorting\nSupports advanced querying with flexible pagination and filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Retrieve locations list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of locations per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at",
                        "description": "Field to sort locations by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter locations by specific city",
                        "name": "city_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved locations list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.LocationDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No locations found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during locations retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to add a new geographical location to the system\nSupports creating locations with detailed geospatial information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Create a new location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Location Creation Details",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.LocationCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Location successfully created with full details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.LocationDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid location creation payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required - missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges (admin role required)",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during location creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/locations/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Performs a full-text search across location details with advanced filtering\nAllows finding locations by keywords, city, coordinates, and other attributes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Search locations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minLength": 2,
                        "type": "string",
                        "description": "Search term for finding locations",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of search results per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"relevance",
                        "description": "Field to sort search results",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter locations by specific city",
                        "name": "city_id",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "format": "float64",
                        "description": "Latitude for proximity search",
                        "name": "latitude",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "format": "float64",
                        "description": "Longitude for proximity search",
                        "name": "longitude",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "number",
                        "format": "float64",
                        "description": "Search radius in kilometers for proximity search",
                        "name": "radius",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully completed location search",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.LocationDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No locations match the search query",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during location search",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/locations/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches comprehensive details of a location by its unique identifier\nReturns full location information including city details and geospatial data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Retrieve a specific location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Location Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved location details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.LocationDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid location ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during location retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to modify location details\nSupports partial updates with optional fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Update an existing location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Location Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location Update Payload",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.LocationUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Location successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.LocationDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid location update payload or ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during location update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to permanently remove a location from the system\nDeletes the location and its associated resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Locations"
                ],
                "summary": "Delete a location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Location Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Location successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid location ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during location deletion",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/messages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of messages with optional filtering and sorting\nSupports advanced querying with flexible pagination and filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Retrieve messages list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of messages per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at",
                        "description": "Field to sort messages by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter messages by specific thread",
                        "name": "thread_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter messages by specific sender",
                        "name": "sender_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved messages list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.MessageDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No messages found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during messages retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows authenticated users to send a message in a specific discussion thread\nSupports creating different types of messages (discussion, AI-generated)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Create a new message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Message Creation Details",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.CreateMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message successfully created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.MessageDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid message creation payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required - missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient thread access privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during message creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/messages/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Performs a full-text search across message content with advanced filtering\nAllows finding messages by keywords and other attributes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Search messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minLength": 2,
                        "type": "string",
                        "description": "Search term for finding messages",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of search results per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"relevance",
                        "description": "Field to sort search results",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully completed message search",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.MessageDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No messages match the search query",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during message search",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/messages/thread/{thread_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches all messages associated with a particular discussion thread\nReturns messages in chronological order, supporting thread context",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Retrieve messages for a specific thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Thread Identifier",
                        "name": "thread_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved thread messages",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.MessageDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No messages found in the thread",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid thread ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient thread access privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Thread not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during message retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/messages/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows message sender or thread administrator to remove a specific message\nPermanently deletes the message from the discussion thread",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Delete a message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Message Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid message ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient deletion privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during message deletion",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/messages/{thread_id}/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows message sender to modify their own message content\nSupports partial updates with message type preservation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "Update an existing message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Message Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message Update Payload",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.CreateMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.MessageDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid message update payload or ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - can only update own messages",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during message update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/provinces": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of provinces with optional filtering and sorting\nSupports advanced querying with flexible pagination and filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Provinces"
                ],
                "summary": "Retrieve provinces list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of provinces per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at",
                        "description": "Field to sort provinces by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved provinces list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.ProvinceDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No provinces found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during provinces retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to add a new administrative province to the system\nSupports creating provinces with detailed geographical information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Provinces"
                ],
                "summary": "Create a new province",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Province Creation Details",
                        "name": "province",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.ProvinceCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Province successfully created with full details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.ProvinceDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid province creation payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required - missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges (admin role required)",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during province creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/provinces/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Performs a full-text search across province details with advanced filtering\nAllows finding provinces by keywords and other attributes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Provinces"
                ],
                "summary": "Search provinces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minLength": 2,
                        "type": "string",
                        "description": "Search term for finding provinces",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of search results per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"relevance",
                        "description": "Field to sort search results",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully completed province search",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.ProvinceDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No provinces match the search query",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during province search",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/provinces/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches comprehensive details of a province by its unique identifier\nReturns full province information including associated cities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Provinces"
                ],
                "summary": "Retrieve a specific province",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Province Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved province details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.ProvinceDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid province ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Province not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during province retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to modify province details\nSupports partial updates with optional fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Provinces"
                ],
                "summary": "Update an existing province",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Province Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Province Update Payload",
                        "name": "province",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.ProvinceUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Province successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.ProvinceDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid province update payload or ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Province not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during province update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to permanently remove a province from the system\nDeletes the province and its associated resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Provinces"
                ],
                "summary": "Delete a province",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Province Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Province successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid province ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Province not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during province deletion",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/threads": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of discussion threads with optional filtering and sorting\nSupports advanced querying with flexible pagination and filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discussion Threads"
                ],
                "summary": "Retrieve discussion threads list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of threads per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at",
                        "description": "Field to sort threads by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter threads by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter threads by specific event",
                        "name": "event_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved threads list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.ThreadDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No threads found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during threads retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows authenticated users to start a new discussion thread for a specific event\nSupports creating threads with optional initial status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discussion Threads"
                ],
                "summary": "Create a new discussion thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Thread Creation Details",
                        "name": "thread",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.CreateThread"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Thread successfully created with full details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.ThreadDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid thread creation payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required - missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient event access privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during thread creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/threads/event/{event_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the discussion thread associated with a particular event\nReturns the primary or most recent thread for the given event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discussion Threads"
                ],
                "summary": "Retrieve thread for a specific event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Event Identifier",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved event thread",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.ThreadDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid event ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "No thread found for the specified event",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during event thread retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/threads/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Performs a full-text search across thread details with advanced filtering\nAllows finding threads by keywords, event, and other attributes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discussion Threads"
                ],
                "summary": "Search discussion threads",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minLength": 2,
                        "type": "string",
                        "description": "Search term for finding threads",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of search results per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"relevance",
                        "description": "Field to sort search results",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter threads by status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully completed thread search",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.ThreadDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No threads match the search query",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during thread search",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/threads/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches comprehensive details of a thread by its unique identifier\nReturns full thread information including creator, participants, and messages",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discussion Threads"
                ],
                "summary": "Retrieve a specific discussion thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Thread Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved thread details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.ThreadDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid thread ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Thread not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during thread retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows thread creator or event administrator to modify thread details\nSupports partial updates with thread status changes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discussion Threads"
                ],
                "summary": "Update an existing discussion thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Thread Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Thread Update Payload",
                        "name": "thread",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.CreateThread"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.ThreadDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid thread update payload or ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient thread modification privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Thread not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during thread update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows thread creator or event administrator to remove a specific thread\nPermanently deletes the thread and associated messages",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discussion Threads"
                ],
                "summary": "Delete a discussion thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Thread Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid thread ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient thread deletion privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Thread not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during thread deletion",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/threads/{id}/join": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows authenticated users to join an existing discussion thread\nAdds the current user as a participant in the thread",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discussion Threads"
                ],
                "summary": "Join a discussion thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Thread Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully joined thread",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.ThreadDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid thread ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - thread joining not allowed",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Thread not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "409": {
                        "description": "User already a participant in the thread",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during thread joining",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of user accounts with optional filtering and sorting\nSupports advanced querying with flexible pagination and filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Retrieve users list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of users per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at",
                        "description": "Field to sort users by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter users by system role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter users by account status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved users list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No users found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during users retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to modify user account details\nSupports partial updates with optional fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Update an existing user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User Account Update Payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User account successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user update payload or ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User account not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during user account update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Allows user registration with email or third-party authentication\nSupports creating user accounts with various authentication providers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Create a new user account",
                "parameters": [
                    {
                        "description": "User Account Creation Details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User account successfully created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user creation payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists with the provided email",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during user account creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/badges": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a list of badges earned by a specific user\nReturns comprehensive badge details with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Badges"
                ],
                "summary": "Retrieve user's badges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Identifier",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of badges per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at",
                        "description": "Field to sort badges by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user badges",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserBadgeDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No badges found for the user",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to award a specific badge to a user\nCreates a new user badge association in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Badges"
                ],
                "summary": "Assign a badge to a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Badge Assignment Details",
                        "name": "badge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserBadgePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Badge successfully assigned to user",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserBadgeDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid badge assignment payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required - missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges (admin role required)",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User or badge not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Badge already assigned to user",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge assignment",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to revoke a specific badge from a user\nPermanently deletes the user badge association",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Badges"
                ],
                "summary": "Remove a badge from a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Identifier",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique Badge Identifier",
                        "name": "badge_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Badge successfully removed from user",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user or badge ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User badge association not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge removal",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/badges/count": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the total number of badges earned by a specific user\nSupports optional filtering by badge type or name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Badges"
                ],
                "summary": "Count user's badges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Identifier",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional filter to count badges by name",
                        "name": "badge_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved badge count",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge count",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/profiles": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a paginated list of user profiles with optional filtering and sorting\nSupports advanced querying with flexible pagination and filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Retrieve users profiles list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of profiles per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"created_at",
                        "description": "Field to sort profiles by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter profiles by partial full name match",
                        "name": "fullname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profiles list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No user profiles found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during profiles retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows users to modify their profile details\nSupports partial updates with optional fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Update an existing user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User Profile Update Payload",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid profile update payload or ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - can only update own profile",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User profile not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during profile update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators or users to create a detailed user profile\nSupports initializing profile with optional personal information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Create a new user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User Profile Creation Details",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User profile successfully created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid profile creation payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Profile already exists for the user",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during profile creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/profiles/avatar": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows users to upload a new profile picture\nSupports multipart file upload or URL-based avatar update",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Update user profile avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Profile Identifier",
                        "name": "id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "URL of the new avatar image",
                        "name": "avatar_url",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "New Avatar Image File",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Avatar successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid avatar update payload or file",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - can only update own avatar",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User profile not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during avatar update",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/profiles/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the profile details of the authenticated user\nReturns comprehensive profile information for the logged-in user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Retrieve the current user's profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved authenticated user profile",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User profile not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during profile retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/profiles/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Performs a full-text search across user profile details with advanced filtering\nAllows finding user profiles by keywords, name, and other attributes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Search user profiles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minLength": 2,
                        "type": "string",
                        "description": "Search term for finding user profiles",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of search results per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"relevance",
                        "description": "Field to sort search results",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully completed user profile search",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No user profiles match the search query",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during user profile search",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/profiles/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches comprehensive details of a user profile by its unique identifier\nReturns full profile information including user details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Retrieve a specific user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Profile Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profile details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid profile ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User profile not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during profile retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to permanently remove a user profile\nDeletes the profile and associated user information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Delete a user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Profile Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid profile ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User profile not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during profile deletion",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/profiles/{id}/verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows users to upload their government-issued ID (KTP) for identity verification",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Verify user's identity by uploading KTP image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Profile Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "format": "binary",
                        "description": "KTP/Identity Document Image",
                        "name": "identity_image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Identity document uploaded successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserProfileDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid profile ID or file upload error",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - user can only verify their own profile",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during identity verification",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Performs a full-text search across user details with advanced filtering\nAllows finding users by keywords, email, and other attributes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Search users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "minLength": 2,
                        "type": "string",
                        "description": "Search term for finding users",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of search results per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"relevance",
                        "description": "Field to sort search results",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"desc",
                        "description": "Sort direction",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter users by system role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter users by account status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully completed user search",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No users match the search query",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during user search",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches comprehensive details of a user account by its unique identifier\nReturns full user information including profile and role details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Retrieve a specific user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user account details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User account not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during user account retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows administrators to permanently remove a user account\nDeletes the user account and associated resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Delete a user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Identifier",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User account successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User account not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during user account deletion",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/badges": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches comprehensive badge details for a specific user\nReturns full badge information including badge metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Badges"
                ],
                "summary": "Retrieve detailed user badge information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token (without 'Bearer ' prefix)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique User Identifier",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user badge details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.UserBadgeDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "No badges found for the user",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during badge retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_holycann_cultour-backend_internal_achievement_models.Badge": {
            "description": "Comprehensive model for tracking and managing user achievements Provides a structured representation of badges with unique identifiers, metadata, and timestamps",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "created_at": {
                    "description": "Timestamp when the badge was created\n@Description Precise timestamp of badge creation in UTC\n@Description Helps track the badge's lifecycle and origin\n@Example \"2023-06-15T14:30:00Z\"\n@Format date-time",
                    "type": "string"
                },
                "description": {
                    "description": "Badge description\n@Description Detailed explanation of how to earn the badge\n@Description Provides context and motivation for users to achieve this badge\n@Example \"Discovered and visited 50 unique locations across the platform\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "icon_url": {
                    "description": "URL to badge icon\n@Description Full URL pointing to the visual representation of the badge\n@Description Should be a high-quality, recognizable icon or image\n@Example \"https://cdn.example.com/badges/master-explorer.png\"\n@Format uri",
                    "type": "string",
                    "format": "uri"
                },
                "id": {
                    "description": "Unique identifier for the badge\n@Description Globally unique UUID for the badge, generated automatically\n@Example \"550e8400-e29b-41d4-a716-446655440000\"\n@Format uuid",
                    "type": "string"
                },
                "name": {
                    "description": "Badge name\n@Description Human-readable, distinctive name for the badge\n@Description Represents the achievement or milestone\n@Example \"Master Explorer\"\n@Required true\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "updated_at": {
                    "description": "Timestamp when the badge was last updated\n@Description Precise timestamp of the last modification to the badge in UTC\n@Description Indicates when badge details were last changed\n@Example \"2023-06-16T10:15:00Z\"\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_achievement_models.BadgeCreate": {
            "description": "Payload structure for creating a new badge in the system Provides the necessary details to mint a new achievement badge",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Badge description\n@Description Detailed explanation of how to earn the badge\n@Description Provides clear guidance on achievement criteria\n@Example \"Climbed peaks in 5 different mountain ranges\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "icon_url": {
                    "description": "URL to badge icon\n@Description Full URL pointing to the visual representation of the badge\n@Description Should be a high-quality, recognizable icon\n@Example \"https://cdn.example.com/badges/mountain-conqueror.png\"\n@Format uri",
                    "type": "string",
                    "format": "uri"
                },
                "name": {
                    "description": "Badge name\n@Description Human-readable name for the new badge\n@Description Must be unique and descriptive\n@Example \"Mountain Conqueror\"\n@Required true\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_achievement_models.BadgeDTO": {
            "description": "Lightweight data transfer object for badge details Used for API responses to provide a clean, minimal representation of badges",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the badge was created\n@Description Precise timestamp of badge creation in UTC\n@Example \"2023-06-15T14:30:00Z\"\n@Format date-time",
                    "type": "string"
                },
                "description": {
                    "description": "Badge description\n@Description Detailed explanation of how to earn the badge\n@Example \"Discovered and visited 50 unique locations across the platform\"",
                    "type": "string"
                },
                "icon_url": {
                    "description": "URL to badge icon\n@Description Full URL pointing to the visual representation of the badge\n@Example \"https://cdn.example.com/badges/master-explorer.png\"\n@Format uri",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the badge\n@Description Globally unique UUID for the badge\n@Example \"550e8400-e29b-41d4-a716-446655440000\"\n@Format uuid",
                    "type": "string"
                },
                "name": {
                    "description": "Badge name\n@Description Human-readable name of the badge\n@Example \"Master Explorer\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the badge was last updated\n@Description Precise timestamp of the last modification to the badge in UTC\n@Example \"2023-06-16T10:15:00Z\"\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_achievement_models.BadgeUpdate": {
            "description": "Payload structure for updating existing badge details Supports partial updates with optional fields",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "description": {
                    "description": "Badge description\n@Description Updated explanation of how to earn the badge\n@Description Optional field for refining achievement criteria\n@Example \"Discovered and visited 75 unique locations across the platform\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "icon_url": {
                    "description": "URL to badge icon\n@Description Updated URL pointing to the visual representation of the badge\n@Description Optional field for updating badge visual\n@Example \"https://cdn.example.com/badges/advanced-explorer.png\"\n@Format uri",
                    "type": "string",
                    "format": "uri"
                },
                "id": {
                    "description": "Unique identifier for the badge\n@Description Globally unique UUID of the badge to be updated\n@Description Must match an existing badge in the system\n@Example \"550e8400-e29b-41d4-a716-446655440000\"\n@Required true\n@Format uuid",
                    "type": "string"
                },
                "name": {
                    "description": "Badge name\n@Description Updated human-readable name for the badge\n@Description Optional field for renaming the badge\n@Example \"Advanced Explorer\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_cultural_models.EventDTO": {
            "description": "Structured representation of event data for API responses Includes related entities and provides a clean, comprehensive view of event information",
            "type": "object",
            "properties": {
                "city": {
                    "description": "City details\n@Description City where the event is taking place\n@Description Helps users understand the event's urban context",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.City"
                        }
                    ]
                },
                "created_at": {
                    "description": "Event creation time\n@Description Timestamp of when the event was first created in the system\n@Format date-time",
                    "type": "string"
                },
                "creator": {
                    "description": "Event creator details\n@Description Information about the user who created the event\n@Description Enables attribution and trust",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.User"
                        }
                    ]
                },
                "description": {
                    "description": "Event description\n@Description Detailed explanation of the event's purpose, activities, and highlights\n@Example \"A vibrant music festival featuring local and international artists\"",
                    "type": "string"
                },
                "end_date": {
                    "description": "Event end date\n@Description Official end date and time of the event\n@Format date-time",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the event\n@Description Globally unique UUID for the event\n@Example \"event_123\"\n@Format uuid",
                    "type": "string"
                },
                "image_url": {
                    "description": "Event image URL\n@Description Public URL pointing to the event's primary image\n@Example \"https://example.com/event_image.jpg\"\n@Format uri",
                    "type": "string"
                },
                "is_kid_friendly": {
                    "description": "Whether the event is kid-friendly\n@Description Indicates if the event is suitable for children\n@Example true",
                    "type": "boolean"
                },
                "location": {
                    "description": "Location details\n@Description Detailed information about the event's location\n@Description Provides geographical context and navigation information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.Location"
                        }
                    ]
                },
                "name": {
                    "description": "Event name\n@Description Official name of the cultural event\n@Example \"Summer Music Festival\"",
                    "type": "string"
                },
                "province": {
                    "description": "Province details\n@Description Province or region hosting the event\n@Description Provides broader geographical information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.Province"
                        }
                    ]
                },
                "start_date": {
                    "description": "Event start date\n@Description Official start date and time of the event\n@Format date-time",
                    "type": "string"
                },
                "views": {
                    "description": "Number of views for the event\n@Description Total number of times the event has been viewed\n@Description Helps track event popularity and engagement\n@Example 13",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_discussion_models.CreateMessage": {
            "description": "Structured payload for message creation and update operations Supports flexible input for different message types",
            "type": "object",
            "required": [
                "content",
                "thread_id"
            ],
            "properties": {
                "content": {
                    "description": "Message content\n@Description Actual text content of the message\n@Description Must be provided during message creation\n@Example \"Hello, this is a discussion message\"\n@MaxLength 1000",
                    "type": "string",
                    "maxLength": 1000
                },
                "id": {
                    "description": "Unique identifier for the message (optional for creation)\n@Description Optional UUID for the message during creation or update\n@Description Used to identify specific messages during updates\n@Example \"message_123\"\n@Format uuid",
                    "type": "string"
                },
                "sender_id": {
                    "description": "Reference to the user who sent the message\n@Description Optional user ID for message sender\n@Description Typically set automatically during message creation\n@Example \"user_789\"\n@Format uuid",
                    "type": "string"
                },
                "thread_id": {
                    "description": "Reference to the thread the message belongs to\n@Description Unique identifier linking the message to a specific discussion thread\n@Description Required for message context and organization\n@Example \"thread_456\"\n@Format uuid",
                    "type": "string"
                },
                "type": {
                    "description": "Type of message\n@Description Optional message type specification\n@Description Defaults to discussion type if not specified\n@Example \"discussion\"",
                    "enum": [
                        "discussion",
                        "ai"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.MessageType"
                        }
                    ]
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_discussion_models.CreateThread": {
            "description": "Structured payload for thread creation and update operations Supports flexible input for thread initialization and modification",
            "type": "object",
            "required": [
                "event_id"
            ],
            "properties": {
                "creator_id": {
                    "description": "Reference to the user who created the thread\n@Description Optional user ID for thread creator\n@Description Typically set automatically during thread creation\n@Example \"user_789\"\n@Format uuid",
                    "type": "string"
                },
                "event_id": {
                    "description": "Reference to the related event\n@Description Unique identifier linking the thread to a specific event\n@Description Required for thread context and organization\n@Example \"event_456\"\n@Format uuid",
                    "type": "string"
                },
                "status": {
                    "description": "Thread status\n@Description Optional thread status specification\n@Description Defaults to 'active' if not specified\n@Example \"active\"\n@Enum active,closed,archived",
                    "type": "string",
                    "enum": [
                        "active",
                        "closed",
                        "archived"
                    ]
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_discussion_models.MessageDTO": {
            "description": "Comprehensive message data transfer object with additional context Used for API responses to provide rich message information",
            "type": "object",
            "properties": {
                "content": {
                    "description": "Message content\n@Description Actual text content of the message\n@Example \"Hello, this is a discussion message\"",
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp when the message was created\n@Description Precise timestamp of message creation in UTC\n@Format date-time",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the message\n@Description Globally unique UUID for the message\n@Example \"message_123\"\n@Format uuid",
                    "type": "string"
                },
                "sender": {
                    "description": "Sender's profile details\n@Description Comprehensive information about the message sender\n@Description Provides context and attribution for the message",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.User"
                        }
                    ]
                },
                "thread_id": {
                    "description": "Reference to the thread the message belongs to\n@Description Unique identifier linking the message to a specific discussion thread\n@Example \"thread_456\"\n@Format uuid",
                    "type": "string"
                },
                "type": {
                    "description": "Type of message\n@Description Categorizes the message based on its origin or purpose\n@Example \"discussion\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.MessageType"
                        }
                    ]
                },
                "updated_at": {
                    "description": "Timestamp when the message was last updated\n@Description Precise timestamp of the last modification to the message in UTC\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_discussion_models.MessageType": {
            "description": "Enumeration of possible message types in the discussion platform Allows differentiation between user-generated and AI-generated messages",
            "type": "string",
            "enum": [
                "discussion",
                "ai"
            ],
            "x-enum-varnames": [
                "DiscussionMessageType",
                "AIMessageType"
            ]
        },
        "github_com_holycann_cultour-backend_internal_discussion_models.Participant": {
            "description": "Detailed participant entry with thread and user references",
            "type": "object",
            "required": [
                "thread_id",
                "user_id"
            ],
            "properties": {
                "joined_at": {
                    "description": "Timestamp when the user joined the thread",
                    "type": "string"
                },
                "thread_id": {
                    "description": "Unique identifier for the thread\n@example \"thread_123\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the participant entry was last updated",
                    "type": "string"
                },
                "user_id": {
                    "description": "Reference to the user participating in the thread\n@example \"user_789\"",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_discussion_models.ThreadDTO": {
            "description": "Comprehensive data transfer object for thread details Used for API responses to provide rich thread information with related entities",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the thread was created\n@Description Precise timestamp of thread creation in UTC\n@Format date-time",
                    "type": "string"
                },
                "creator": {
                    "description": "Creator's profile details\n@Description Comprehensive information about the thread creator\n@Description Provides context and attribution for the thread",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.User"
                        }
                    ]
                },
                "discussion_participants": {
                    "description": "List of participants in the thread\n@Description Detailed list of users participating in the discussion\n@Description Helps track engagement and thread membership",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_discussion_models.Participant"
                    }
                },
                "event_id": {
                    "description": "Reference to the related event\n@Description Unique identifier linking the thread to a specific event\n@Description Enables contextual discovery and event-based communication\n@Example \"event_456\"\n@Format uuid",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the thread\n@Description Globally unique UUID for the thread\n@Example \"thread_123\"\n@Format uuid",
                    "type": "string"
                },
                "status": {
                    "description": "Thread status\n@Description Current state of the discussion thread\n@Description Indicates thread accessibility and lifecycle stage\n@Example \"active\"\n@Enum active,closed,archived",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the thread was last updated\n@Description Precise timestamp of the last modification to the thread in UTC\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.City": {
            "description": "Comprehensive model for tracking and managing city information Provides a structured representation of cities with detailed metadata and geographical context",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "created_at": {
                    "description": "Timestamp when the city was created\n@Description Precise timestamp of city record creation in UTC\n@Description Helps track city information lifecycle and origin\n@Format date-time",
                    "type": "string"
                },
                "description": {
                    "description": "City description\n@Description Detailed explanation of the city's characteristics, history, or significance\n@Description Provides context and additional information about the city\n@Example \"The capital city of Indonesia\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "id": {
                    "description": "Unique identifier for the city\n@Description Globally unique UUID for the city, generated automatically\n@Description Serves as the primary key and reference for the city\n@Example \"city_123\"\n@Format uuid",
                    "type": "string"
                },
                "image_url": {
                    "description": "URL of the city's image\n@Description Public URL pointing to a representative image of the city\n@Description Serves as a visual representation for the city\n@Format uri",
                    "type": "string"
                },
                "name": {
                    "description": "City name\n@Description Official name of the city\n@Description Provides a clear, distinctive identifier for the location\n@Example \"Jakarta\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "province_id": {
                    "description": "ID of the province where the city is located\n@Description Unique identifier linking the city to its parent province\n@Description Enables hierarchical geographical organization\n@Format uuid",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the city was last updated\n@Description Precise timestamp of the last modification to the city details in UTC\n@Description Indicates when city information was last changed\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.CityCreate": {
            "description": "Structured payload for city creation operations Supports input for initializing new city records",
            "type": "object",
            "required": [
                "name",
                "province_id"
            ],
            "properties": {
                "description": {
                    "description": "City description\n@Description Detailed explanation of the city's characteristics\n@Description Provides context and additional information\n@Example \"The capital city of Indonesia\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "image_url": {
                    "description": "URL of the city's image\n@Description Optional public URL pointing to a representative image\n@Description Serves as a visual representation for the city\n@Format uri",
                    "type": "string"
                },
                "name": {
                    "description": "City name\n@Description Official name of the new city\n@Description Must be unique and descriptive\n@Example \"Jakarta\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "province_id": {
                    "description": "ID of the province where the city is located\n@Description Unique identifier of the parent province\n@Description Required for geographical organization\n@Format uuid",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.CityDTO": {
            "description": "Comprehensive data transfer object for city details Used for API responses to provide rich city information with related entities",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the city was created\n@Description Precise timestamp of city record creation in UTC\n@Format date-time",
                    "type": "string"
                },
                "description": {
                    "description": "City description\n@Description Detailed explanation of the city's characteristics\n@Example \"The capital city of Indonesia\"",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the city\n@Description Globally unique UUID for the city\n@Example \"city_123\"\n@Format uuid",
                    "type": "string"
                },
                "image_url": {
                    "description": "URL of the city's image\n@Description Public URL pointing to a representative image of the city\n@Format uri",
                    "type": "string"
                },
                "name": {
                    "description": "City name\n@Description Official name of the city\n@Example \"Jakarta\"",
                    "type": "string"
                },
                "province": {
                    "description": "Province details\n@Description Comprehensive information about the province containing the city\n@Description Provides broader geographical context",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.Province"
                        }
                    ]
                },
                "province_id": {
                    "description": "ID of the province where the city is located\n@Description Unique identifier of the parent province\n@Format uuid",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the city was last updated\n@Description Precise timestamp of the last modification to the city details in UTC\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.CityUpdate": {
            "description": "Structured payload for city update operations Supports partial updates with optional fields",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "description": {
                    "description": "City description\n@Description Updated description of the city's characteristics\n@Description Optional field for refining city information\n@Example \"The expanded capital region of Indonesia\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "id": {
                    "description": "Unique identifier for the city\n@Description Globally unique UUID of the city to be updated\n@Description Must match an existing city in the system\n@Example \"city_123\"\n@Format uuid",
                    "type": "string"
                },
                "image_url": {
                    "description": "URL of the city's image\n@Description Optional update for the city's representative image\n@Description Allows changing the visual representation\n@Format uri",
                    "type": "string"
                },
                "name": {
                    "description": "City name\n@Description Updated official name for the city\n@Description Optional field for renaming the city\n@Example \"Jakarta Raya\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "province_id": {
                    "description": "ID of the province where the city is located\n@Description Optional update for the city's parent province\n@Description Allows changing the geographical context\n@Format uuid",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.Location": {
            "description": "Comprehensive model for tracking and managing precise geographical points Provides a structured representation of locations with detailed geospatial information",
            "type": "object",
            "required": [
                "city_id",
                "latitude",
                "longitude",
                "name"
            ],
            "properties": {
                "city_id": {
                    "description": "ID of the city where the location is located\n@Description Unique identifier linking the location to its parent city\n@Description Enables hierarchical geographical organization\n@Format uuid",
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp when the location was created\n@Description Precise timestamp of location record creation in UTC\n@Description Helps track location information lifecycle and origin\n@Format date-time",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the location\n@Description Globally unique UUID for the location, generated automatically\n@Description Serves as the primary key and reference for the location\n@Example \"location_123\"\n@Format uuid",
                    "type": "string"
                },
                "latitude": {
                    "description": "Latitude in decimal degrees\n@Description Geographic latitude coordinate for precise location mapping\n@Description Represents the north-south position on the Earth's surface\n@Example -6.175392",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude in decimal degrees\n@Description Geographic longitude coordinate for precise location mapping\n@Description Represents the east-west position on the Earth's surface\n@Example 106.827153",
                    "type": "number"
                },
                "name": {
                    "description": "Name of the location\n@Description Official or descriptive name of the geographical point\n@Description Provides a clear, distinctive identifier for the location\n@Example \"Monas\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "updated_at": {
                    "description": "Timestamp when the location was last updated\n@Description Precise timestamp of the last modification to the location details in UTC\n@Description Indicates when location information was last changed\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.LocationCreate": {
            "description": "Structured payload for location creation operations Supports input for initializing new location records with geospatial data",
            "type": "object",
            "required": [
                "city_id",
                "latitude",
                "longitude",
                "name"
            ],
            "properties": {
                "city_id": {
                    "description": "ID of the city where the location is located\n@Description Unique identifier of the parent city\n@Description Required for geographical organization\n@Format uuid",
                    "type": "string"
                },
                "latitude": {
                    "description": "Latitude in decimal degrees\n@Description Geographic latitude coordinate for precise location mapping\n@Description Represents the north-south position on the Earth's surface\n@Example -6.175392",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude in decimal degrees\n@Description Geographic longitude coordinate for precise location mapping\n@Description Represents the east-west position on the Earth's surface\n@Example 106.827153",
                    "type": "number"
                },
                "name": {
                    "description": "Location name\n@Description Official or descriptive name of the new location\n@Description Must be unique and descriptive\n@Example \"Monas\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.LocationDTO": {
            "description": "Comprehensive data transfer object for location details Used for API responses to provide rich location information with related entities",
            "type": "object",
            "properties": {
                "city": {
                    "description": "City details\n@Description Comprehensive information about the city containing the location\n@Description Provides broader geographical context",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_place_models.City"
                        }
                    ]
                },
                "city_id": {
                    "description": "ID of the city where the location is located\n@Description Unique identifier of the parent city\n@Format uuid",
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp when the location was created\n@Description Precise timestamp of location record creation in UTC\n@Format date-time",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the location\n@Description Globally unique UUID for the location\n@Example \"location_123\"\n@Format uuid",
                    "type": "string"
                },
                "latitude": {
                    "description": "Latitude in decimal degrees\n@Description Geographic latitude coordinate for precise location mapping\n@Example -6.175392",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude in decimal degrees\n@Description Geographic longitude coordinate for precise location mapping\n@Example 106.827153",
                    "type": "number"
                },
                "name": {
                    "description": "Name of the location\n@Description Official or descriptive name of the geographical point\n@Example \"Monas\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the location was last updated\n@Description Precise timestamp of the last modification to the location details in UTC\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.LocationUpdate": {
            "description": "Structured payload for location update operations Supports partial updates with optional fields",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "city_id": {
                    "description": "ID of the city where the location is located\n@Description Optional update for the location's parent city\n@Description Allows changing the geographical context\n@Format uuid",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the location\n@Description Globally unique UUID of the location to be updated\n@Description Must match an existing location in the system\n@Example \"location_123\"\n@Format uuid",
                    "type": "string"
                },
                "latitude": {
                    "description": "Latitude in decimal degrees\n@Description Optional update for the location's latitude coordinate\n@Description Allows precise geospatial repositioning\n@Example -6.175392",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude in decimal degrees\n@Description Optional update for the location's longitude coordinate\n@Description Allows precise geospatial repositioning\n@Example 106.827153",
                    "type": "number"
                },
                "name": {
                    "description": "Location name\n@Description Updated name for the location\n@Description Optional field for renaming the location\n@Example \"National Monument\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.Province": {
            "description": "Comprehensive model for tracking and managing administrative regions Provides a structured representation of provinces with detailed geographical context",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "created_at": {
                    "description": "Timestamp when the province was created\n@Description Precise timestamp of province record creation in UTC\n@Description Helps track province information lifecycle and origin\n@Format date-time",
                    "type": "string"
                },
                "description": {
                    "description": "Province description\n@Description Detailed explanation of the province's characteristics, history, or significance\n@Description Provides context and additional information about the administrative region\n@Example \"A beautiful province with rich cultural heritage\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "id": {
                    "description": "Unique identifier for the province\n@Description Globally unique UUID for the province, generated automatically\n@Description Serves as the primary key and reference for the province\n@Example \"province_123\"\n@Format uuid",
                    "type": "string"
                },
                "name": {
                    "description": "Province name\n@Description Official name of the administrative region\n@Description Provides a clear, distinctive identifier for the province\n@Example \"West Java\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "updated_at": {
                    "description": "Timestamp when the province was last updated\n@Description Precise timestamp of the last modification to the province details in UTC\n@Description Indicates when province information was last changed\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.ProvinceCreate": {
            "description": "Structured payload for province creation operations Supports input for initializing new province records",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Province description\n@Description Detailed explanation of the province's characteristics\n@Description Provides context and additional information\n@Example \"A beautiful province with rich cultural heritage\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "description": "Province name\n@Description Official name of the new administrative region\n@Description Must be unique and descriptive\n@Example \"West Java\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.ProvinceDTO": {
            "description": "Comprehensive data transfer object for province details Used for API responses to provide rich province information with related entities",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the province was created\n@Description Precise timestamp of province record creation in UTC\n@Format date-time",
                    "type": "string"
                },
                "description": {
                    "description": "Province description\n@Description Detailed explanation of the province's characteristics\n@Example \"A beautiful province with rich cultural heritage\"",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the province\n@Description Globally unique UUID for the province\n@Example \"province_123\"\n@Format uuid",
                    "type": "string"
                },
                "name": {
                    "description": "Province name\n@Description Official name of the administrative region\n@Example \"West Java\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the province was last updated\n@Description Precise timestamp of the last modification to the province details in UTC\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_place_models.ProvinceUpdate": {
            "description": "Structured payload for province update operations Supports partial updates with optional fields",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "description": {
                    "description": "Province description\n@Description Updated description of the province's characteristics\n@Description Optional field for refining province information\n@Example \"An expanded province with diverse cultural landscapes\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "id": {
                    "description": "Unique identifier for the province\n@Description Globally unique UUID of the province to be updated\n@Description Must match an existing province in the system\n@Example \"province_123\"\n@Format uuid",
                    "type": "string"
                },
                "name": {
                    "description": "Province name\n@Description Updated name for the administrative region\n@Description Optional field for renaming the province\n@Example \"Greater West Java\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_users_models.User": {
            "description": "Comprehensive model for tracking and managing user account information Provides a structured representation of user authentication and account details",
            "type": "object",
            "required": [
                "email",
                "role"
            ],
            "properties": {
                "created_at": {
                    "description": "Timestamp when the user account was created\n@Description Precise timestamp of user account creation in UTC\n@Description Helps track user lifecycle and origin\n@Format date-time",
                    "type": "string"
                },
                "email": {
                    "description": "User's email address\n@Description Unique email used for authentication and communication\n@Description Must be a valid, unique email address\n@Example \"john.doe@example.com\"\n@Format email",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the user\n@Description Globally unique UUID for the user account, generated automatically\n@Description Serves as the primary key and reference for the user\n@Example \"user_123\"\n@Format uuid",
                    "type": "string"
                },
                "phone": {
                    "description": "User's phone number\n@Description Unique phone number for user contact and authentication\n@Description Optional field for additional user identification\n@Example \"+1234567890\"\n@Format phone",
                    "type": "string"
                },
                "role": {
                    "description": "User's role in the system\n@Description Defines the user's access level and permissions\n@Description Determines system-wide access control\n@Example \"user\"\n@Enum user,admin,moderator",
                    "type": "string",
                    "enum": [
                        "user",
                        "admin",
                        "moderator"
                    ]
                },
                "updated_at": {
                    "description": "Timestamp when the user account was last updated\n@Description Precise timestamp of the last modification to the user account in UTC\n@Description Indicates when user information was last changed\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_users_models.UserBadgeDTO": {
            "description": "Comprehensive data transfer object for user badge details Used for API responses to provide rich user achievement information",
            "type": "object",
            "properties": {
                "badge": {
                    "description": "Full badge details\n@Description Comprehensive information about the earned badge\n@Description Provides context and details of the specific achievement",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_achievement_models.Badge"
                        }
                    ]
                },
                "badge_id": {
                    "description": "Badge identifier\n@Description Unique identifier of the badge earned by the user\n@Example \"explorer\"\n@Format uuid",
                    "type": "string",
                    "example": "explorer"
                },
                "created_at": {
                    "description": "Timestamp when the badge was earned\n@Description Precise timestamp of when the user acquired the badge\n@Description Helps track the user's achievement progression\n@Format date-time",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp of the last user badge update\n@Description Precise timestamp of the last modification to the user badge record\n@Description Indicates any changes or updates to the badge status\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_users_models.UserBadgePayload": {
            "description": "Structured payload for user badge management operations Supports creating or removing user badge associations",
            "type": "object",
            "required": [
                "badge_id",
                "user_id"
            ],
            "properties": {
                "badge_id": {
                    "description": "Badge identifier\n@Description Unique identifier of the badge to be assigned or removed\n@Description Must be a valid badge in the system\n@Example \"explorer\"\n@Format uuid",
                    "type": "string",
                    "example": "explorer"
                },
                "user_id": {
                    "description": "Associated user ID\n@Description Unique identifier of the user receiving the badge\n@Description Must be a valid user account\n@Example \"user_123\"\n@Format uuid",
                    "type": "string",
                    "example": "user_123"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_users_models.UserCreate": {
            "description": "Structured payload for user account creation operations Supports initializing new user accounts with authentication details",
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "User's email address\n@Description Unique email for user registration\n@Description Must be a valid, unique email address\n@Example \"john.doe@example.com\"\n@Format email",
                    "type": "string"
                },
                "password": {
                    "description": "User's password for account authentication\n@Description Password for local email-based authentication\n@Description Must meet minimum security requirements\n@MinLength 8",
                    "type": "string",
                    "minLength": 8
                },
                "phone": {
                    "description": "User's phone number\n@Description Optional phone number for user contact\n@Example \"+1234567890\"\n@Format phone",
                    "type": "string"
                },
                "role": {
                    "description": "User's role during account creation\n@Description Specifies the initial role for the user account\n@Description Optional field with a default value of \"user\"\n@Example \"user\"\n@Enum user,admin,moderator",
                    "type": "string",
                    "default": "user",
                    "enum": [
                        "user",
                        "admin",
                        "moderator"
                    ]
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_users_models.UserDTO": {
            "description": "Comprehensive data transfer object for user details Used for API responses to provide rich user information with controlled exposure",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the user account was created\n@Description Precise timestamp of user account creation in UTC\n@Format date-time",
                    "type": "string"
                },
                "email": {
                    "description": "User's email address\n@Description Unique email used for communication\n@Example \"john.doe@example.com\"\n@Format email",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the user\n@Description Globally unique UUID for the user account\n@Example \"user_123\"\n@Format uuid",
                    "type": "string"
                },
                "phone": {
                    "description": "User's phone number\n@Description Optional phone number for user contact\n@Example \"+1234567890\"\n@Format phone",
                    "type": "string"
                },
                "role": {
                    "description": "User's role in the system\n@Description Defines the user's access level and permissions\n@Example \"user\"\n@Enum user,admin,moderator",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the user account was last updated\n@Description Precise timestamp of the last modification to the user account in UTC\n@Format date-time",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_users_models.UserProfileCreate": {
            "description": "Structured payload for user profile creation operations Supports input for initializing new user profile records",
            "type": "object",
            "properties": {
                "avatar_url": {
                    "description": "URL to user's avatar image\n@Description Public URL pointing to the user's profile picture\n@Description Optional field for profile visual representation\n@Example \"https://example.com/avatar.jpg\"\n@Format uri",
                    "type": "string",
                    "format": "uri"
                },
                "bio": {
                    "description": "User's biographical information\n@Description Personal description, interests, or professional background\n@Description Optional field for additional user context\n@Example \"Software engineer passionate about building great products\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "fullname": {
                    "description": "User's full name\n@Description Official or preferred full name of the user\n@Description Optional during creation, can be updated later\n@Example \"John Doe\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "identity_image_url": {
                    "description": "URL to uploaded KTP image\n@Description Public URL of the user's official government-issued ID\n@Description Optional field for identity verification\n@Example \"https://example.com/ktp.jpg\"\n@Format uri",
                    "type": "string",
                    "format": "uri"
                },
                "user_id": {
                    "description": "Associated user ID (only for creation)\n@Description Unique identifier of the user for whom the profile is being created\n@Description Must be a valid, unique user account\n@Example \"user_123\"\n@Format uuid",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_users_models.UserProfileDTO": {
            "description": "Comprehensive data transfer object for user profile details Used for API responses to provide rich user profile information",
            "type": "object",
            "properties": {
                "avatar_url": {
                    "description": "URL to user's avatar image\n@Description Public URL pointing to the user's profile picture\n@Example \"https://example.com/avatar.jpg\"\n@Format uri",
                    "type": "string"
                },
                "bio": {
                    "description": "User's biographical information\n@Description Personal description, interests, or professional background\n@Example \"Software engineer passionate about building great products\"",
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp when the profile was created\n@Description Precise timestamp of user profile creation in UTC\n@Format date-time",
                    "type": "string"
                },
                "fullname": {
                    "description": "User's full name\n@Description Official or preferred full name of the user\n@Example \"John Doe\"",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the user profile\n@Description Globally unique UUID for the user profile\n@Example \"profile_123\"\n@Format uuid",
                    "type": "string"
                },
                "identity_image_url": {
                    "description": "URL to uploaded KTP image\n@Description Public URL of the user's official government-issued ID\n@Example \"https://example.com/ktp.jpg\"\n@Format uri",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the profile was last updated\n@Description Precise timestamp of the last modification to the profile details in UTC\n@Format date-time",
                    "type": "string"
                },
                "user": {
                    "description": "Associated user details\n@Description Comprehensive information about the user account\n@Description Provides additional context for the user profile",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_internal_users_models.User"
                        }
                    ]
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_users_models.UserProfileUpdate": {
            "description": "Structured payload for user profile update operations Supports partial updates with optional fields",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "bio": {
                    "description": "User's biographical information\n@Description Updated personal description or background\n@Description Optional field for refining profile information\n@Example \"Senior software engineer with a passion for innovative solutions\"\n@MaxLength 500",
                    "type": "string",
                    "maxLength": 500
                },
                "fullname": {
                    "description": "User's full name\n@Description Updated full name for the user profile\n@Description Optional field for renaming the profile\n@Example \"John A. Doe\"\n@MinLength 2\n@MaxLength 100",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "id": {
                    "description": "Unique identifier for the user profile\n@Description Globally unique UUID of the user profile to be updated\n@Description Must match an existing user profile in the system\n@Example \"profile_123\"\n@Format uuid",
                    "type": "string"
                },
                "user_id": {
                    "description": "Associated user ID for the profile update\n@Description Unique identifier of the user associated with this profile\n@Description Optional during update, helps ensure correct profile ownership\n@Example \"user_123\"\n@Format uuid",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_internal_users_models.UserUpdate": {
            "description": "Structured payload for user account update operations Supports partial updates with optional fields",
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "email": {
                    "description": "User's email address\n@Description Updated email address for the user account\n@Description Optional field for changing contact information\n@Example \"john.updated@example.com\"\n@Format email",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the user\n@Description Globally unique UUID of the user account to be updated\n@Description Must match an existing user in the system\n@Example \"user_123\"\n@Format uuid",
                    "type": "string"
                },
                "phone": {
                    "description": "User's phone number\n@Description Optional phone number for user contact\n@Example \"+1234567890\"\n@Format phone",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_pkg_response.APIResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Actual response data"
                },
                "error": {
                    "description": "Detailed error information (only populated for error responses)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.ErrorDetails"
                        }
                    ]
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "metadata": {
                    "description": "Additional metadata",
                    "type": "object",
                    "additionalProperties": true
                },
                "pagination": {
                    "description": "Pagination information (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_holycann_cultour-backend_pkg_response.Pagination"
                        }
                    ]
                },
                "request_id": {
                    "description": "Unique request identifier for tracing",
                    "type": "string"
                },
                "success": {
                    "description": "Status of the response (success/error)",
                    "type": "boolean"
                },
                "timestamp": {
                    "description": "Timestamp of the response",
                    "type": "string"
                }
            }
        },
        "github_com_holycann_cultour-backend_pkg_response.ErrorDetails": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Machine-readable error code",
                    "type": "string"
                },
                "details": {
                    "description": "Detailed error description",
                    "type": "string"
                },
                "recoverable": {
                    "description": "Indicates if the error is potentially recoverable",
                    "type": "boolean"
                },
                "trace": {
                    "description": "Trace information for debugging",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_holycann_cultour-backend_pkg_response.Pagination": {
            "type": "object",
            "properties": {
                "has_next_page": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "internal_gemini.CreateChatSessionRequest": {
            "description": "Detailed request structure for initiating an AI chat session with user authentication",
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "event_id": {
                    "description": "Optional EventID to provide context for the chat session, enhancing personalization\n@Optional true\n@Example \"event456\"",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID is the unique identifier of the user creating the session\n@Required true\n@Example \"user123\"",
                    "type": "string"
                }
            }
        },
        "internal_gemini.CreateChatSessionResponse": {
            "description": "Response containing the unique session identifier for subsequent interactions",
            "type": "object",
            "properties": {
                "session_id": {
                    "description": "Unique identifier for the created chat session, used for message exchange\n@Example \"session789\"",
                    "type": "string"
                }
            }
        },
        "internal_gemini.EventDescriptionResponse": {
            "description": "Response containing a rich, AI-generated description of a cultural event",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Comprehensive description of the event, generated by AI analysis\n@Example \"This vibrant cultural event showcases the traditional dance of the region...\"",
                    "type": "string"
                }
            }
        },
        "internal_gemini.GenerateEventDescriptionRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "additional_context": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "internal_gemini.SendMessageRequest": {
            "description": "Request structure for sending a message to the AI with content validation",
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "description": "Message content to be sent to the AI, with length restriction\n@Required true\n@Max length 500\n@Example \"Tell me about the cultural significance of this event\"",
                    "type": "string",
                    "maxLength": 500
                }
            }
        },
        "internal_gemini.SendMessageResponse": {
            "description": "Response from the AI containing multiple lines of contextual text",
            "type": "object",
            "properties": {
                "response": {
                    "description": "Multiple lines of the AI's response, providing a comprehensive answer\n@Example [\"The event represents...\", \"Its cultural importance lies in...\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Insert Your JWT Token. Do NOT include \"Bearer \" prefix. Example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}